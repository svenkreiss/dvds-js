{"name":"Dvds-js","tagline":"Distributed versioned data structures implemented in JavaScript.","body":"# dvds-js\r\n\r\nDistributed versioned data structures implemented in JavaScript for browsers and node.js.\r\n__It is currently in development without a stable release yet.__\r\n\r\nThe idea is that you can _fork_ an object (like an array), change the original and the forked object and then _merge_ it in a graceful way. Implementations are inspired by git. Every object should support:\r\n\r\n* __commit__: storing the current state of the object\r\n* __fork__: making a deep copy\r\n* __merge__: merges a fork back into the original branch\r\n\r\n\r\n\r\n## Examples\r\n\r\nBelow are test cases that currently pass.  \r\n(Warning: there is currently no LCS algorithm and arrays of different length can get corrupted in the merge.)\r\n\r\n```\r\n    // fork, modify original branch and merge\r\n    var a = new dvds.Array(['test']);\r\n    var b = a.fork();\r\n    a.data = ['originalModified'];\r\n    a.merge(b);\r\n    // --> a.data: ['originalModified']\r\n\r\n    // fork, modify forked branch and merge\r\n    var a = new dvds.Array(['test']);\r\n    var b = a.fork();\r\n    b.data = ['forkedModified'];\r\n    a.merge(b);\r\n    // --> a.data: ['forkedModified']\r\n\r\n    // fork, modify both branches and merge (conflict resolution: original)\r\n    var a = new dvds.Array(['test']);\r\n    var b = a.fork();\r\n    a.data = ['originalModified'];\r\n    b.data = ['forkedModified'];\r\n    a.merge(b);\r\n    // --> a.data: ['originalModified']\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}