/**
 * dvds.js - v0.0.1 - build 2014-02-26 01:02:40
 * Contributors: 
 * Copyright (c) 2014 Sven Kreiss; MIT license
 */
if("function"!=typeof define)var define=require("amdefine")(module);define("dvds",["crypto-js.SHA3"],function(a){return dvds={version:"0.0.1"},dvds.CommitTree=function(){},dvds.Commit=function(b,c){function d(a,b){var c=[];for(i in b)c.push(a.indexOf(b[i]));for(i in c)0!=i&&c[i-1]>c[i]&&(c[i]=a.indexOf(b[i],i-1));return c}function e(a,b,c){var e=[],f=d(a,c),g=d(b,c);console.log(f),console.log(g);for(i in c)f[i]==g[i]&&f[i]>=0?e.push(c[i]):f[i]==i&&-1==g[i]?i<b.length&&e.push(b[i]):g[i]==i&&-1==f[i]?i<a.length&&e.push(a[i]):-1==f[i]&&-1==g[i]&&e.push(a[i]);return e}this.parents=b,this.data=c,this.dataHash=a.SHA3(JSON.stringify(c)).toString(),this.date=new Date;var f=[this.dataHash,this.date];this.parents&&b.map(function(a){f.push(a.id)}),this.id=a.SHA3(JSON.stringify(f)).toString().substr(0,40),this.parentIds=function(){return this.parents?this.parents.map(function(a){return a.id}):["0"]},this.idsRecursive=function(){var a=[this.id];return this.parents&&this.parents.map(function(b){a=a.concat(b.idsRecursive())}),a},this.searchId=function(a){if(a.indexOf(this.id)>=0)return this;if(!this.parents)return null;for(p in b){var c=b[p].searchId(a);if(c)return c}return null},this.clone=function(){var a=new dvds.Commit(this.parents,this.data);return a.date=this.date,a.id=this.id,a},this.recursiveThreeWayMerge=function(a){var b=a.idsRecursive(),c=this.idsRecursive();console.log(c),console.log(b);var d=a.searchId(c),f=this.searchId(b),g=f?f:d;if(f&&d){console.log("Found ancestors in both branches."),f.id!=d.id?(console.log("crap. need to create a virtual common ancestor before merge."),g=f.recursiveThreeWayMerge(d)):console.log("great. common ancestor found.");var h=this.data;Array.isArray(this.data)&&(console.log("merging arrays"),h=e(this.data,a.data,g.data),console.log(h));var i=new dvds.Commit([this,a],h);return console.log("mergedCommit"),console.log(i.parentIds().join(",")),i}return console.log("ERROR: Did not find ancestors in both branches."),console.log("Abort merge."),console.log(d),void console.log(f)}},dvds.Array=function(a){this.data=a,this.commits=[],this.currentCommit=null,this.objectGraph=function(){},this.commitConnectionsToString=function(){var a=[];for(c in this.commits){var b=this.commits[c].parentIds().map(function(a){return a.substr(0,7)}).join(",");a.push(b+" <-- "+this.commits[c].id.substr(0,7))}return a.join(" ... ")},this.visualizeInD3=function(a,b){function c(a){for(n in i)if(i[n].id==a)return i[n]}function d(){f.attr("transform",function(a){return"translate("+a.x+","+a.y+")"}),g.attr("x1",function(a){return a.source.x}).attr("y1",function(a){return a.source.y}).attr("x2",function(a){return a.target.x}).attr("y2",function(a){return a.target.y})}var e=this.commits.map(function(a){return[a.id,a.parentIds()]});a||(a=600),b||(b=400);var f,g,h=d3.layout.force().size([a,b]).linkDistance(50).charge(-400).on("tick",d),i=h.nodes(),j=h.links(),k=this.currentCommit.id;return e.map(function(c){i.push(c[0]==k?{id:c[0],x:9*a/10,y:b/10,fixed:!0}:{id:c[0],x:a/2,y:b/2})}),i.push({id:"0",x:a/10,y:b/10,fixed:!0}),e.map(function(a){a[1].map(function(b){j.push({source:c(a[0]),target:c(b)})})}),console.log(i),console.log(j),function(a){f=a.selectAll(".node"),g=a.selectAll(".link"),f=f.data(i);var b=f.enter().append("g").attr("class","node");b.append("circle").attr("r",5),b.append("text").attr("x",0).attr("y",20).text(function(a){return a&&a.id?a.id.substr(0,7):"undefined"}),g=g.data(j),g.enter().append("line").attr("class","link"),console.log("starting"),h.start()}},this.commit=function(){var a=this.currentCommit?[this.currentCommit]:null;return commit=new dvds.Commit(a,this.data),this.currentCommit&&commit.dataHash==this.currentCommit.dataHash?void console.log("No change. Skipping."):(this.commits.push(commit),void(this.currentCommit=commit))},this.toString=function(){return this.currentCommit?this.data+" -- committed: "+this.currentCommit.id+": "+this.currentCommit.data.toString():this.data+" -- no commits"},this.fork=function(){this.commit();var a=new dvds.Array(this.data);return a.commits=this.commits.map(function(a){return a.clone()}),a.currentCommit=a.commits[a.commits.length-1],a},this.merge=function(a){this.commit(),a.commit();var b=this.currentCommit.recursiveThreeWayMerge(a.currentCommit);this.currentCommit=b,this.commits.push(b);var d=this.commits.map(function(a){return a.id});for(c in a.commits)d.indexOf(a.commits[c].id)<0&&this.commits.push(a.commits[c]);return console.log("merge done"),console.log(this.commitConnectionsToString()),b}},dvds});